name: Resource Initialization - Comprehensive Test Suite

on:
  push:
    branches: [main, develop]
    paths:
      - 'client/**'
      - 'ops/docs/contracts/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'client/**'
      - 'ops/docs/contracts/**'
      - '.github/workflows/**'

env:
  NODE_VERSION: '20.19.9'
  CI: true

jobs:
  # Job 1: Code Quality and Static Analysis
  quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./client
        run: npm ci
        
      - name: Run ESLint (Zero warnings policy)
        working-directory: ./client
        run: npm run lint
        
      - name: Run TypeScript type checking
        working-directory: ./client
        run: npm run typecheck
        
      - name: Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results
          path: client/lint-results.json
          retention-days: 7

  # Job 2: Unit and Contract Tests
  unit-tests:
    name: Unit & Contract Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./client
        run: npm ci
        
      - name: Run unit tests with coverage
        working-directory: ./client
        run: npm run test:unit -- --coverage
        env:
          NODE_ENV: test
          CI: true
          
      - name: Run contract tests
        working-directory: ./client
        run: npm run test:contract
        env:
          NODE_ENV: test
          CI: true
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            client/coverage/
            client/junit.xml
          retention-days: 7
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success()
        with:
          directory: ./client/coverage/
          flags: unit-tests
          name: unit-coverage

  # Job 3: Security Tests
  security-tests:
    name: Security Validation
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./client
        run: npm ci
        
      - name: Run security tests
        working-directory: ./client
        run: npm run test:security
        env:
          NODE_ENV: test
          SECURITY_TESTS_ENABLED: true
          CI: true
          
      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: client/coverage/security-report.html
          retention-days: 7

  # Job 4: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, unit-tests]
    services:
      # Add test database service if needed
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./client
        run: npm ci
        
      - name: Run integration tests
        working-directory: ./client
        run: npm run test:integration
        env:
          NODE_ENV: test
          TEST_DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
          CI: true
          
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            client/coverage/integration-report.html
            client/integration-junit.xml
          retention-days: 7

  # Job 5: E2E Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, security-tests]
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./client
        run: npm ci
        
      - name: Run E2E tests
        working-directory: ./client
        run: npm run test:e2e
        env:
          NODE_ENV: test
          CI: true
          TEST_TIMEOUT: 120000
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            client/coverage/e2e-report.html
            client/e2e-screenshots/
          retention-days: 7

  # Job 6: Performance Tests (conditional)
  performance-tests:
    name: Performance Validation
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'performance-test')
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./client
        run: npm ci
        
      - name: Run performance tests
        working-directory: ./client
        run: npm run test:performance
        env:
          NODE_ENV: test
          PERFORMANCE_TESTS_ENABLED: true
          PERFORMANCE_TEST_SLA: 5000
          CI: true
          
      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: client/coverage/performance-report.html
          retention-days: 7

  # Job 7: Coverage Analysis and Reporting
  coverage-report:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-tests, e2e-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./client
        run: npm ci
        
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./test-artifacts
          
      - name: Generate comprehensive coverage report
        working-directory: ./client
        run: npm run test:coverage
        env:
          NODE_ENV: test
          CI: true
          
      - name: Check coverage thresholds (≥95%)
        working-directory: ./client
        run: |
          COVERAGE=$(npm run test:coverage -- --silent | grep "All files" | awk '{print $10}' | sed 's/%//')
          if [ "$COVERAGE" -lt "95" ]; then
            echo "Coverage $COVERAGE% is below required 95% threshold"
            exit 1
          fi
          echo "Coverage $COVERAGE% meets requirements"
          
      - name: Upload comprehensive coverage report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-coverage-report
          path: |
            client/coverage/
            test-artifacts/
          retention-days: 30
          
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './client/coverage/coverage-summary.json';
            if (fs.existsSync(path)) {
              const coverage = JSON.parse(fs.readFileSync(path, 'utf8'));
              const coveragePercent = coverage.total.lines.pct;
              const body = `## 📊 Test Coverage Report
              
              **Total Coverage: ${coveragePercent}%**
              
              - Lines: ${coverage.total.lines.pct}%
              - Branches: ${coverage.total.branches.pct}%
              - Functions: ${coverage.total.functions.pct}%
              - Statements: ${coverage.total.statements.pct}%
              
              ${coveragePercent >= 95 ? '✅' : '❌'} Coverage ${coveragePercent >= 95 ? 'meets' : 'does not meet'} 95% requirement
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  # Job 8: Test Summary and Notifications
  test-summary:
    name: Test Summary & Notifications
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, security-tests, integration-tests, e2e-tests, coverage-report]
    if: always()
    steps:
      - name: Generate test summary
        run: |
          echo "## 🧪 Resource Initialization Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Category | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.quality.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY  
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage Analysis | ${{ needs.coverage-report.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Result: ${{ (needs.quality.result == 'success' && needs.unit-tests.result == 'success' && needs.security-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.e2e-tests.result == 'success') && '🎉 ALL TESTS PASSED' || '⚠️ SOME TESTS FAILED' }}**" >> $GITHUB_STEP_SUMMARY